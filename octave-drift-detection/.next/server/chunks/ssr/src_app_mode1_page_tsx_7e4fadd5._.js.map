{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/fe/octave-drift-detection/src/app/mode1/page.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect, useRef, useCallback, useMemo } from \"react\"\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n  Colors,\n} from \"chart.js\"\nimport { Line } from \"react-chartjs-2\"\nimport { faker } from \"@faker-js/faker\"\nimport DatePicker from \"react-datepicker\"\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport dayjs from \"dayjs\"\nimport utc from \"dayjs/plugin/utc\"\nimport timezone from \"dayjs/plugin/timezone\"\nimport { utcToZonedTime } from \"date-fns-tz\"\nimport { FaArrowRight } from \"react-icons/fa\"\nimport { FaArrowLeft } from \"react-icons/fa\"\nimport {\n  useReactTable,\n  getCoreRowModel,\n  flexRender,\n  getPaginationRowModel,\n  getSortedRowModel,\n  getFilteredRowModel,\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type FilterFn,\n  fuzzyFuzzyFilter,\n} from \"@tanstack/react-table\"\nimport { Table, TableBody, TableCell, TableFooter, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport { useToast } from \"@/components/ui/use-toast\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { useTheme } from \"next-themes\"\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler, Colors)\n\ninterface DataPoint {\n  x: string\n  y: number\n}\n\ninterface ChartData {\n  labels: string[]\n  datasets: {\n    label: string\n    data: number[]\n    borderColor: string\n    backgroundColor: string\n    tension: number\n    fill: boolean\n  }[]\n}\n\ninterface ErrorData {\n  id: number\n  timestamp: string\n  outlet: string\n  error_code: string\n  description: string\n}\n\ninterface ThresholdExceedance {\n  id: number\n  timestamp: string\n  outlet: string\n  parameter: string\n  value: number\n  threshold: number\n}\n\ninterface RangeData {\n  id: number\n  timestamp: string\n  outlet: string\n  value: number\n  expected_value: number\n  percentage_error: number\n}\n\ninterface Mode1Props {\n  initialData?: any[]\n  initialErrorData?: ErrorData[]\n  initialThresholdExceedances?: ThresholdExceedance[]\n  initialRangeData?: RangeData[]\n}\n\n// Define a fuzzy filter function\nconst fuzzyFilter: FilterFn<any> = (row, columnId, value) => {\n  if (!value) {\n    return true\n  }\n\n  const cellValue = row.getValue(columnId)\n  if (typeof cellValue !== \"string\") {\n    return false\n  }\n\n  const searchTerm = value.toLowerCase()\n  const cellValueLower = cellValue.toLowerCase()\n\n  // Simple fuzzy matching logic\n  let searchIndex = 0\n  for (let i = 0; i < cellValueLower.length; i++) {\n    if (cellValueLower[i] === searchTerm[searchIndex]) {\n      searchIndex++\n    }\n    if (searchIndex === searchTerm.length) {\n      return true\n    }\n  }\n\n  return false\n}\n\nconst Mode1: React.FC<Mode1Props> = ({\n  initialData = [],\n  initialErrorData = [],\n  initialThresholdExceedances = [],\n  initialRangeData = [],\n}) => {\n  // Date and Timezone Logic\n  const [timeZone, setTimeZone] = useState(dayjs.tz.guess())\n  const [startDate, setStartDate] = useState<Date | null>(dayjs().subtract(1, \"day\").toDate())\n  const [endDate, setEndDate] = useState<Date | null>(dayjs().toDate())\n  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([startDate, endDate])\n  const [utcStartDate, setUtcStartDate] = useState<string | null>(null)\n  const [utcEndDate, setUtcEndDate] = useState<string | null>(null)\n  const [refreshInterval, setRefreshInterval] = useState<number | null>(null)\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [refreshingIntervalValue, setRefreshingIntervalValue] = useState(60)\n  const [isAutoRefreshing, setIsAutoRefreshing] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isErrorDataLoading, setIsErrorDataLoading] = useState(false)\n  const [isThresholdExceedancesLoading, setIsThresholdExceedancesLoading] = useState(false)\n  const [isRangeDataLoading, setIsRangeDataLoading] = useState(false)\n  const [isSimulating, setIsSimulating] = useState(false)\n  const [simulationSpeed, setSimulationSpeed] = useState(1)\n  const [simulatedData, setSimulatedData] = useState<any[]>([])\n  const [simulatedErrorData, setSimulatedErrorData] = useState<ErrorData[]>([])\n  const [simulatedThresholdExceedances, setSimulatedThresholdExceedances] = useState<ThresholdExceedance[]>([])\n  const [simulatedRangeData, setSimulatedRangeData] = useState<RangeData[]>([])\n  const [isErrorDataSimulationEnabled, setIsErrorDataSimulationEnabled] = useState(false)\n  const [isThresholdExceedancesSimulationEnabled, setIsThresholdExceedancesSimulationEnabled] = useState(false)\n  const [isRangeDataSimulationEnabled, setIsRangeDataSimulationEnabled] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(false)\n  const { setTheme } = useTheme()\n\n  // Chart Logic\n  const [chartData, setChartData] = useState<ChartData | null>(null)\n  const chartRef = useRef<ChartJS<\"line\">>(null)\n  const [isChartLoading, setIsChartLoading] = useState(false)\n\n  // Table Logic\n  const [data, setData] = useState<any[]>(initialData)\n  const [errorData, setErrorData] = useState<ErrorData[]>(initialErrorData)\n  const [thresholdExceedances, setThresholdExceedances] = useState<ThresholdExceedance[]>(initialThresholdExceedances)\n  const [rangeData, setRangeData] = useState<RangeData[]>(initialRangeData)\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\n  const [sorting, setSorting] = useState<SortingState>([])\n  const [globalFilter, setGlobalFilter] = useState(\"\")\n  const [rowSelection, setRowSelection] = useState({})\n  const [isTableLoading, setIsTableLoading] = useState(false)\n\n  // Error Comparison Table Logic\n  const [errorColumnFilters, setErrorColumnFilters] = useState<ColumnFiltersState>([])\n  const [errorSorting, setErrorSorting] = useState<SortingState>([])\n  const [errorGlobalFilter, setErrorGlobalFilter] = useState(\"\")\n  const [isErrorTableLoading, setIsErrorTableLoading] = useState(false)\n\n  // Threshold Exceedances Table Logic\n  const [thresholdColumnFilters, setThresholdColumnFilters] = useState<ColumnFiltersState>([])\n  const [thresholdSorting, setThresholdSorting] = useState<SortingState>([])\n  const [thresholdGlobalFilter, setThresholdGlobalFilter] = useState(\"\")\n  const [isThresholdTableLoading, setIsThresholdTableLoading] = useState(false)\n\n  // Selected Range Data Table Logic\n  const [rangeColumnFilters, setRangeColumnFilters] = useState<ColumnFiltersState>([])\n  const [rangeSorting, setRangeSorting] = useState<SortingState>([])\n  const [rangeGlobalFilter, setRangeGlobalFilter] = useState(\"\")\n  const [isRangeTableLoading, setIsRangeTableLoading] = useState(false)\n\n  // Toast\n  const { toast } = useToast()\n\n  // Columns for the main table\n  const columns = useMemo<ColumnDef<any>[]>(\n    () => [\n      {\n        accessorKey: \"timestamp\",\n        header: \"Timestamp\",\n        cell: ({ getValue }) => {\n          const timestamp = getValue() as string\n          const zonedTime = utcToZonedTime(timestamp, timeZone)\n          return dayjs(zonedTime).format(\"YYYY-MM-DD HH:mm:ss\")\n        },\n      },\n      {\n        accessorKey: \"outlet\",\n        header: \"Outlet\",\n      },\n      {\n        accessorKey: \"parameter1\",\n        header: \"Parameter 1\",\n      },\n      {\n        accessorKey: \"parameter2\",\n        header: \"Parameter 2\",\n      },\n      {\n        accessorKey: \"parameter3\",\n        header: \"Parameter 3\",\n      },\n      {\n        accessorKey: \"parameter4\",\n        header: \"Parameter 4\",\n      },\n      {\n        accessorKey: \"parameter5\",\n        header: \"Parameter 5\",\n      },\n    ],\n    [timeZone],\n  )\n\n  // Columns for the Error Comparison table\n  const errorColumns = useMemo<ColumnDef<ErrorData>[]>(() => {\n    return [\n      {\n        accessorKey: \"timestamp\",\n        header: \"Timestamp\",\n        cell: ({ getValue }) => {\n          const timestamp = getValue() as string\n          const zonedTime = utcToZonedTime(timestamp, timeZone)\n          return dayjs(zonedTime).format(\"YYYY-MM-DD HH:mm:ss\")\n        },\n      },\n      {\n        accessorKey: \"outlet\",\n        header: \"Outlet\",\n      },\n      {\n        accessorKey: \"error_code\",\n        header: \"Error Code\",\n      },\n      {\n        accessorKey: \"description\",\n        header: \"Description\",\n      },\n    ]\n  }, [timeZone])\n\n  // Columns for the Threshold Exceedances table\n  const thresholdColumns = useMemo<ColumnDef<ThresholdExceedance>[]>(() => {\n    return [\n      {\n        accessorKey: \"timestamp\",\n        header: \"Timestamp\",\n        cell: ({ getValue }) => {\n          const timestamp = getValue() as string\n          const zonedTime = utcToZonedTime(timestamp, timeZone)\n          return dayjs(zonedTime).format(\"YYYY-MM-DD HH:mm:ss\")\n        },\n      },\n      {\n        accessorKey: \"outlet\",\n        header: \"Outlet\",\n      },\n      {\n        accessorKey: \"parameter\",\n        header: \"Parameter\",\n      },\n      {\n        accessorKey: \"value\",\n        header: \"Value\",\n      },\n      {\n        accessorKey: \"threshold\",\n        header: \"Threshold\",\n      },\n    ]\n  }, [timeZone])\n\n  // Columns for the Selected Range Data table\n  const rangeColumns = useMemo<ColumnDef<RangeData>[]>(() => {\n    return [\n      {\n        accessorKey: \"timestamp\",\n        header: \"Timestamp\",\n        cell: ({ getValue }) => {\n          const timestamp = getValue() as string\n          const zonedTime = utcToZonedTime(timestamp, timeZone)\n          return dayjs(zonedTime).format(\"YYYY-MM-DD HH:mm:ss\")\n        },\n      },\n      {\n        accessorKey: \"outlet\",\n        header: \"Outlet\",\n      },\n      {\n        accessorKey: \"value\",\n        header: \"Value\",\n      },\n      {\n        accessorKey: \"expected_value\",\n        header: \"Expected Value\",\n      },\n      {\n        accessorKey: \"percentage_error\",\n        header: \"Percentage Error\",\n      },\n    ]\n  }, [timeZone])\n\n  // Main Table Instance\n  const table = useReactTable({\n    data,\n    columns,\n    filterFns: {\n      fuzzyFuzzyFilter,\n    },\n    onColumnFiltersChange: setColumnFilters,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onGlobalFilterChange: setGlobalFilter,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      columnFilters,\n      sorting,\n      globalFilter,\n      rowSelection,\n    },\n  })\n\n  // Error Comparison Table Instance\n  const errorTable = useReactTable({\n    data: errorData,\n    columns: errorColumns,\n    filterFns: {\n      fuzzyFuzzyFilter,\n    },\n    onColumnFiltersChange: setErrorColumnFilters,\n    onSortingChange: setErrorSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onGlobalFilterChange: setErrorGlobalFilter,\n    state: {\n      columnFilters: errorColumnFilters,\n      sorting: errorSorting,\n      globalFilter: errorGlobalFilter,\n    },\n  })\n\n  // Threshold Exceedances Table Instance\n  const thresholdTable = useReactTable({\n    data: thresholdExceedances,\n    columns: thresholdColumns,\n    filterFns: {\n      fuzzyFuzzyFilter,\n    },\n    onColumnFiltersChange: setThresholdColumnFilters,\n    onSortingChange: setThresholdSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onGlobalFilterChange: setThresholdGlobalFilter,\n    state: {\n      columnFilters: thresholdColumnFilters,\n      sorting: thresholdSorting,\n      globalFilter: thresholdGlobalFilter,\n    },\n  })\n\n  // Selected Range Data Table Instance\n  const rangeTable = useReactTable({\n    data: rangeData,\n    columns: rangeColumns,\n    filterFns: {\n      fuzzyFuzzyFilter,\n    },\n    onColumnFiltersChange: setRangeColumnFilters,\n    onSortingChange: setRangeSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onGlobalFilterChange: setRangeGlobalFilter,\n    state: {\n      columnFilters: rangeColumnFilters,\n      sorting: rangeSorting,\n      globalFilter: rangeGlobalFilter,\n    },\n  })\n\n  // Function to generate random data for the chart\n  const generateRandomData = useCallback((count: number): DataPoint[] => {\n    const newData: DataPoint[] = []\n    for (let i = 0; i < count; i++) {\n      newData.push({\n        x: faker.date.recent().toISOString(),\n        y: faker.number.int({ min: 0, max: 100 }),\n      })\n    }\n    return newData\n  }, [])\n\n  // Function to generate random error data\n  const generateRandomErrorData = useCallback((count: number): ErrorData[] => {\n    const newErrorData: ErrorData[] = []\n    for (let i = 0; i < count; i++) {\n      newErrorData.push({\n        id: faker.number.int({ min: 1000, max: 9999 }),\n        timestamp: faker.date.recent().toISOString(),\n        outlet: faker.helpers.arrayElement([\"Outlet A\", \"Outlet B\", \"Outlet C\"]),\n        error_code: faker.string.alphanumeric(5),\n        description: faker.lorem.sentence(),\n      })\n    }\n    return newErrorData\n  }, [])\n\n  // Function to generate random threshold exceedances data\n  const generateRandomThresholdExceedances = useCallback((count: number): ThresholdExceedance[] => {\n    const newThresholdExceedances: ThresholdExceedance[] = []\n    for (let i = 0; i < count; i++) {\n      newThresholdExceedances.push({\n        id: faker.number.int({ min: 1000, max: 9999 }),\n        timestamp: faker.date.recent().toISOString(),\n        outlet: faker.helpers.arrayElement([\"Outlet A\", \"Outlet B\", \"Outlet C\"]),\n        parameter: faker.helpers.arrayElement([\"Temperature\", \"Pressure\", \"Flow Rate\"]),\n        value: faker.number.float({ min: 50, max: 150, precision: 0.01 }),\n        threshold: faker.number.float({\n          min: 80,\n          max: 120,\n          precision: 0.01,\n        }),\n      })\n    }\n    return newThresholdExceedances\n  }, [])\n\n  // Function to generate random range data\n  const generateRandomRangeData = useCallback((count: number): RangeData[] => {\n    const newRangeData: RangeData[] = []\n    for (let i = 0; i < count; i++) {\n      newRangeData.push({\n        id: faker.number.int({ min: 1000, max: 9999 }),\n        timestamp: faker.date.recent().toISOString(),\n        outlet: faker.helpers.arrayElement([\"Outlet A\", \"Outlet B\", \"Outlet C\"]),\n        value: faker.number.float({ min: 20, max: 80, precision: 0.01 }),\n        expected_value: faker.number.float({\n          min: 30,\n          max: 70,\n          precision: 0.01,\n        }),\n        percentage_error: faker.number.float({\n          min: -10,\n          max: 10,\n          precision: 0.01,\n        }),\n      })\n    }\n    return newRangeData\n  }, [])\n\n  // Function to update the chart\n  const updateChart = useCallback(\n    (newData: DataPoint[]) => {\n      if (!chartRef.current) return\n\n      const newLabels = newData.map((point) => {\n        const zonedTime = utcToZonedTime(point.x, timeZone)\n        return dayjs(zonedTime).format(\"YYYY-MM-DD HH:mm:ss\")\n      })\n      const newValues = newData.map((point) => point.y)\n\n      setChartData({\n        labels: newLabels,\n        datasets: [\n          {\n            label: \"Random Data\",\n            data: newValues,\n            borderColor: \"rgb(75, 192, 192)\",\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n            tension: 0.4,\n            fill: true,\n          },\n        ],\n      })\n    },\n    [timeZone],\n  )\n\n  // Function to fetch data\n  const fetchData = useCallback(async () => {\n    setIsLoading(true)\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 500))\n\n      const newData = generateRandomData(10)\n      setData(newData)\n      updateChart(newData)\n    } catch (error) {\n      console.error(\"Failed to fetch data:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [generateRandomData, updateChart])\n\n  // Function to fetch error data\n  const fetchErrorData = useCallback(async () => {\n    setIsErrorDataLoading(true)\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 500))\n\n      const newErrorData = generateRandomErrorData(5)\n      setErrorData(newErrorData)\n    } catch (error) {\n      console.error(\"Failed to fetch error data:\", error)\n    } finally {\n      setIsErrorDataLoading(false)\n    }\n  }, [generateRandomErrorData])\n\n  // Function to fetch threshold exceedances data\n  const fetchThresholdExceedances = useCallback(async () => {\n    setIsThresholdExceedancesLoading(true)\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 500))\n\n      const newThresholdExceedances = generateRandomThresholdExceedances(3)\n      setThresholdExceedances(newThresholdExceedances)\n    } catch (error) {\n      console.error(\"Failed to fetch threshold exceedances:\", error)\n    } finally {\n      setIsThresholdExceedancesLoading(false)\n    }\n  }, [generateRandomThresholdExceedances])\n\n  // Function to fetch range data\n  const fetchRangeData = useCallback(async () => {\n    setIsRangeDataLoading(true)\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 500))\n\n      const newRangeData = generateRandomRangeData(4)\n      setRangeData(newRangeData)\n    } catch (error) {\n      console.error(\"Failed to fetch range data:\", error)\n    } finally {\n      setIsRangeDataLoading(false)\n    }\n  }, [generateRandomRangeData])\n\n  // Function to handle manual refresh\n  const handleManualRefresh = useCallback(async () => {\n    setIsRefreshing(true)\n    try {\n      await Promise.all([fetchData(), fetchErrorData(), fetchThresholdExceedances(), fetchRangeData()])\n      toast({\n        title: \"Data Refreshed\",\n        description: \"The data has been manually refreshed.\",\n      })\n    } catch (error) {\n      console.error(\"Failed to refresh data:\", error)\n      toast({\n        title: \"Refresh Failed\",\n        description: \"There was an error refreshing the data.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsRefreshing(false)\n    }\n  }, [fetchData, fetchErrorData, fetchThresholdExceedances, fetchRangeData, toast])\n\n  // Function to start auto-refresh\n  const startAutoRefresh = useCallback(() => {\n    if (refreshingIntervalValue && refreshingIntervalValue > 0) {\n      setIsAutoRefreshing(true)\n      const intervalId = setInterval(async () => {\n        setIsRefreshing(true)\n        try {\n          await Promise.all([fetchData(), fetchErrorData(), fetchThresholdExceedances(), fetchRangeData()])\n          toast({\n            title: \"Data Auto-Refreshed\",\n            description: \"The data has been automatically refreshed.\",\n          })\n        } catch (error) {\n          console.error(\"Failed to auto-refresh data:\", error)\n          toast({\n            title: \"Auto-Refresh Failed\",\n            description: \"There was an error auto-refreshing the data.\",\n            variant: \"destructive\",\n          })\n        } finally {\n          setIsRefreshing(false)\n        }\n      }, refreshingIntervalValue * 1000)\n\n      setRefreshInterval(intervalId)\n      toast({\n        title: \"Auto-Refresh Started\",\n        description: `Data will be refreshed every ${refreshingIntervalValue} seconds.`,\n      })\n    } else {\n      toast({\n        title: \"Invalid Interval Value\",\n        description: \"Please enter a valid interval value greater than 0.\",\n        variant: \"destructive\",\n      })\n    }\n  }, [fetchData, fetchErrorData, fetchThresholdExceedances, fetchRangeData, refreshingIntervalValue, toast])\n\n  // Function to stop auto-refresh\n  const stopAutoRefresh = useCallback(() => {\n    if (refreshInterval) {\n      clearInterval(refreshInterval)\n      setRefreshInterval(null)\n      setIsAutoRefreshing(false)\n      toast({\n        title: \"Auto-Refresh Stopped\",\n        description: \"Automatic data refresh has been stopped.\",\n      })\n    }\n  }, [refreshInterval, toast])\n\n  // Function to handle timezone change\n  const handleTimeZoneChange = (newTimeZone: string) => {\n    setTimeZone(newTimeZone)\n    toast({\n      title: \"Timezone Changed\",\n      description: `Timezone has been changed to ${newTimeZone}.`,\n    })\n  }\n\n  // Function to handle date range change\n  const handleDateRangeChange = (dates: [Date | null, Date | null]) => {\n    setDateRange(dates)\n    if (dates && dates[0] && dates[1]) {\n      setStartDate(dates[0])\n      setEndDate(dates[1])\n\n      // Convert to UTC\n      const utcStart = dayjs(dates[0]).utc().format()\n      const utcEnd = dayjs(dates[1]).utc().format()\n\n      setUtcStartDate(utcStart)\n      setUtcEndDate(utcEnd)\n\n      toast({\n        title: \"Date Range Changed\",\n        description: `Date range has been changed to ${dayjs(dates[0]).format(\n          \"YYYY-MM-DD\",\n        )} - ${dayjs(dates[1]).format(\"YYYY-MM-DD\")}.`,\n      })\n    }\n  }\n\n  // Function to handle simulation start\n  const startSimulation = useCallback(() => {\n    setIsSimulating(true)\n    toast({\n      title: \"Simulation Started\",\n      description: \"Data simulation has started.\",\n    })\n  }, [toast])\n\n  // Function to handle simulation stop\n  const stopSimulation = useCallback(() => {\n    setIsSimulating(false)\n    toast({\n      title: \"Simulation Stopped\",\n      description: \"Data simulation has stopped.\",\n    })\n  }, [toast])\n\n  // Function to simulate data updates\n  const simulateDataUpdate = useCallback(() => {\n    if (isSimulating) {\n      setTimeout(() => {\n        if (!isSimulating) return // Stop if simulation is stopped\n\n        const newData = generateRandomData(5)\n        const newErrorData = isErrorDataSimulationEnabled ? generateRandomErrorData(3) : []\n        const newThresholdExceedances = isThresholdExceedancesSimulationEnabled\n          ? generateRandomThresholdExceedances(2)\n          : []\n        const newRangeData = isRangeDataSimulationEnabled ? generateRandomRangeData(4) : []\n\n        setSimulatedData((prevData) => [...prevData, ...newData])\n        setSimulatedErrorData((prevErrorData) => [...prevErrorData, ...newErrorData])\n        setSimulatedThresholdExceedances((prevThresholdExceedances) => [\n          ...prevThresholdExceedances,\n          ...newThresholdExceedances,\n        ])\n        setSimulatedRangeData((prevRangeData) => [...prevRangeData, ...newRangeData])\n\n        setData((prevData) => [...prevData, ...newData])\n        setErrorData((prevErrorData) => [...prevErrorData, ...newErrorData])\n        setThresholdExceedances((prevThresholdExceedances) => [...prevThresholdExceedances, ...newThresholdExceedances])\n        setRangeData((prevRangeData) => [...prevRangeData, ...newRangeData])\n\n        updateChart([...data, ...newData]) // Update chart with simulated data\n\n        simulateDataUpdate() // Continue simulation\n      }, 1000 / simulationSpeed)\n    }\n  }, [\n    isSimulating,\n    simulationSpeed,\n    generateRandomData,\n    generateRandomErrorData,\n    generateRandomThresholdExceedances,\n    generateRandomRangeData,\n    updateChart,\n    data,\n    isErrorDataSimulationEnabled,\n    isThresholdExceedancesSimulationEnabled,\n    isRangeDataSimulationEnabled,\n  ])\n\n  // Function to toggle dark mode\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode((prev) => !prev)\n    setTheme(isDarkMode ? \"light\" : \"dark\")\n  }, [isDarkMode, setTheme])\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchData()\n    fetchErrorData()\n    fetchThresholdExceedances()\n    fetchRangeData()\n  }, [fetchData, fetchErrorData, fetchThresholdExceedances, fetchRangeData])\n\n  // Start simulation when component mounts if isSimulating is true\n  useEffect(() => {\n    if (isSimulating) {\n      simulateDataUpdate()\n    }\n  }, [isSimulating, simulateDataUpdate])\n\n  // Update chart when simulated data changes\n  useEffect(() => {\n    if (simulatedData.length > 0) {\n      updateChart([...data, ...simulatedData])\n    }\n  }, [simulatedData, updateChart, data])\n\n  return (\n    <div className=\"container py-8\">\n      {/* Header Section */}\n      <div className=\"mb-8 flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">Mode 1 Dashboard</h1>\n        <div className=\"space-x-2\">\n          <Button variant=\"outline\" onClick={handleManualRefresh} disabled={isRefreshing}>\n            {isRefreshing ? \"Refreshing...\" : \"Refresh Data\"}\n          </Button>\n\n          {/* Auto-Refresh Controls */}\n          {isAutoRefreshing ? (\n            <Button variant=\"destructive\" onClick={stopAutoRefresh}>\n              Stop Auto-Refresh\n            </Button>\n          ) : (\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"outline\">Start Auto-Refresh</Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Start Auto-Refresh</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    Set the interval for automatic data refresh in seconds.\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"interval\">Refresh Interval (seconds)</Label>\n                  <Input\n                    type=\"number\"\n                    id=\"interval\"\n                    defaultValue={60}\n                    onChange={(e) => setRefreshingIntervalValue(Number.parseInt(e.target.value))}\n                  />\n                </div>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction onClick={startAutoRefresh}>Start</AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          )}\n\n          {/* Simulation Controls */}\n          {isSimulating ? (\n            <Button variant=\"destructive\" onClick={stopSimulation}>\n              Stop Simulation\n            </Button>\n          ) : (\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"outline\">Start Simulation</Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Start Data Simulation</AlertDialogTitle>\n                  <AlertDialogDescription>Configure the data simulation settings.</AlertDialogDescription>\n                </AlertDialogHeader>\n                <div className=\"grid gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor=\"simulationSpeed\">Simulation Speed:</Label>\n                    <Slider\n                      id=\"simulationSpeed\"\n                      defaultValue={[1]}\n                      max={10}\n                      min={1}\n                      step={1}\n                      onValueChange={(value) => setSimulationSpeed(value[0])}\n                    />\n                    <span>{simulationSpeed}x</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor=\"errorDataSimulation\">Simulate Error Data:</Label>\n                    <Switch\n                      id=\"errorDataSimulation\"\n                      checked={isErrorDataSimulationEnabled}\n                      onCheckedChange={(checked) => setIsErrorDataSimulationEnabled(checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor=\"thresholdExceedancesSimulation\">Simulate Threshold Exceedances:</Label>\n                    <Switch\n                      id=\"thresholdExceedancesSimulation\"\n                      checked={isThresholdExceedancesSimulationEnabled}\n                      onCheckedChange={(checked) => setIsThresholdExceedancesSimulationEnabled(checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor=\"rangeDataSimulation\">Simulate Range Data:</Label>\n                    <Switch\n                      id=\"rangeDataSimulation\"\n                      checked={isRangeDataSimulationEnabled}\n                      onCheckedChange={(checked) => setIsRangeDataSimulationEnabled(checked)}\n                    />\n                  </div>\n                </div>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction onClick={startSimulation}>Start</AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          )}\n\n          {/* Dark Mode Toggle */}\n          <Button variant=\"outline\" onClick={toggleDarkMode}>\n            {isDarkMode ? \"Light Mode\" : \"Dark Mode\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Settings Section */}\n      <div className=\"mb-8 flex items-center space-x-4\">\n        {/* Timezone Selector */}\n        <div>\n          <Select defaultValue={timeZone} onValueChange={(value) => handleTimeZoneChange(value)}>\n            <SelectTrigger className=\"w-[220px]\">\n              <SelectValue placeholder=\"Select Timezone\" />\n            </SelectTrigger>\n            <SelectContent>\n              <ScrollArea className=\"h-72 w-[220px]\">\n                {dayjs.tz.names().map((tz) => (\n                  <SelectItem key={tz} value={tz}>\n                    {tz}\n                  </SelectItem>\n                ))}\n              </ScrollArea>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Date Range Picker */}\n        <div>\n          <DatePicker\n            selectsRange={true}\n            startDate={startDate}\n            endDate={endDate}\n            onChange={(update) => {\n              handleDateRangeChange(update as [Date | null, Date | null])\n            }}\n            isClearable={true}\n            placeholderText=\"Select Date Range\"\n            className=\"border rounded-md p-2 w-64\"\n          />\n        </div>\n\n        {/* UTC Date Range Display */}\n        {utcStartDate && utcEndDate && (\n          <div className=\"flex items-center space-x-2\">\n            <p className=\"text-sm text-gray-500\">\n              UTC Date Range:\n              {dayjs(utcStartDate).format(\"YYYY-MM-DD\")} - {dayjs(utcEndDate).format(\"YYYY-MM-DD\")}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Chart Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Data Visualization</h2>\n        {isChartLoading ? (\n          <Skeleton className=\"w-full h-64\" />\n        ) : chartData ? (\n          <Line ref={chartRef} data={chartData} />\n        ) : (\n          <p>No chart data available.</p>\n        )}\n      </div>\n\n      {/* Main Table Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Data Table</h2>\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder=\"Filter all columns...\"\n            value={globalFilter ?? \"\"}\n            onChange={(e) => table.setGlobalFilter(e.target.value)}\n            className=\"max-w-sm\"\n          />\n        </div>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                        {header.column.getCanSort() ? (\n                          <button onClick={header.column.getToggleSortingHandler()}>\n                            <Separator orientation=\"vertical\" />\n                            {{\n                              asc: \" ⬆️\",\n                              desc: \" ⬇️\",\n                            }[header.column.getIsSorted() as string] ?? null}\n                          </button>\n                        ) : null}\n                      </TableHead>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows?.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                    {isLoading ? <Progress value={50} className=\"max-w-sm\" /> : \"No results.\"}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TableCell colSpan={columns.length}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 text-sm text-muted-foreground\">\n                      {table.getFilteredRowModel().rows.length} of {table.getCoreRowModel().rows.length} row(s)\n                    </div>\n                    <div className=\"flex items-center space-x-2 lg:space-x-4\">\n                      <div className=\"space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => table.previousPage()}\n                          disabled={!table.getCanPreviousPage()}\n                        >\n                          <FaArrowLeft className=\"mr-2 h-4 w-4\" />\n                          Previous\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => table.nextPage()}\n                          disabled={!table.getCanNextPage()}\n                        >\n                          Next\n                          <FaArrowRight className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </div>\n      </div>\n\n      {/* Error Comparison Table Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Error Comparison</h2>\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder=\"Filter error columns...\"\n            value={errorGlobalFilter ?? \"\"}\n            onChange={(e) => errorTable.setGlobalFilter(e.target.value)}\n            className=\"max-w-sm\"\n          />\n        </div>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              {errorTable.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                        {header.column.getCanSort() ? (\n                          <button onClick={header.column.getToggleSortingHandler()}>\n                            <Separator orientation=\"vertical\" />\n                            {{\n                              asc: \" ⬆️\",\n                              desc: \" ⬇️\",\n                            }[header.column.getIsSorted() as string] ?? null}\n                          </button>\n                        ) : null}\n                      </TableHead>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {errorTable.getRowModel().rows?.length ? (\n                errorTable.getRowModel().rows.map((row, i) => (\n                  <tr key={`error-row-${row.id}-${i}`} className=\"hover:bg-gray-700/30 transition-colors duration-150\">\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                    ))}\n                  </tr>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={errorColumns.length} className=\"h-24 text-center\">\n                    {isErrorTableLoading ? <Progress value={50} className=\"max-w-sm\" /> : \"No error results.\"}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TableCell colSpan={errorColumns.length}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 text-sm text-muted-foreground\">\n                      {errorTable.getFilteredRowModel().rows.length} of {errorTable.getCoreRowModel().rows.length}{\" \"}\n                      error(s)\n                    </div>\n                    <div className=\"flex items-center space-x-2 lg:space-x-4\">\n                      <div className=\"space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => errorTable.previousPage()}\n                          disabled={!errorTable.getCanPreviousPage()}\n                        >\n                          <FaArrowLeft className=\"mr-2 h-4 w-4\" />\n                          Previous\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => errorTable.nextPage()}\n                          disabled={!errorTable.getCanNextPage()}\n                        >\n                          Next\n                          <FaArrowRight className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </div>\n      </div>\n\n      {/* Threshold Exceedances Table Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Threshold Exceedances</h2>\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder=\"Filter threshold columns...\"\n            value={thresholdGlobalFilter ?? \"\"}\n            onChange={(e) => thresholdTable.setGlobalFilter(e.target.value)}\n            className=\"max-w-sm\"\n          />\n        </div>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              {thresholdTable.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                        {header.column.getCanSort() ? (\n                          <button onClick={header.column.getToggleSortingHandler()}>\n                            <Separator orientation=\"vertical\" />\n                            {{\n                              asc: \" ⬆️\",\n                              desc: \" ⬇️\",\n                            }[header.column.getIsSorted() as string] ?? null}\n                          </button>\n                        ) : null}\n                      </TableHead>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {thresholdTable.getRowModel().rows?.length ? (\n                thresholdTable.getRowModel().rows.map((outlet) => (\n                  <tr key={`threshold-${outlet.id}`} className=\"hover:bg-rose-900/20 transition-colors duration-150\">\n                    {outlet.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                    ))}\n                  </tr>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={thresholdColumns.length} className=\"h-24 text-center\">\n                    {isThresholdTableLoading ? (\n                      <Progress value={50} className=\"max-w-sm\" />\n                    ) : (\n                      \"No threshold exceedances.\"\n                    )}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TableCell colSpan={thresholdColumns.length}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 text-sm text-muted-foreground\">\n                      {thresholdTable.getFilteredRowModel().rows.length} of{\" \"}\n                      {thresholdTable.getCoreRowModel().rows.length} exceedance(s)\n                    </div>\n                    <div className=\"flex items-center space-x-2 lg:space-x-4\">\n                      <div className=\"space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => thresholdTable.previousPage()}\n                          disabled={!thresholdTable.getCanPreviousPage()}\n                        >\n                          <FaArrowLeft className=\"mr-2 h-4 w-4\" />\n                          Previous\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => thresholdTable.nextPage()}\n                          disabled={!thresholdTable.getCanNextPage()}\n                        >\n                          Next\n                          <FaArrowRight className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </div>\n      </div>\n\n      {/* Selected Range Data Table Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Selected Range Data</h2>\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder=\"Filter range columns...\"\n            value={rangeGlobalFilter ?? \"\"}\n            onChange={(e) => rangeTable.setGlobalFilter(e.target.value)}\n            className=\"max-w-sm\"\n          />\n        </div>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              {rangeTable.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                        {header.column.getCanSort() ? (\n                          <button onClick={header.column.getToggleSortingHandler()}>\n                            <Separator orientation=\"vertical\" />\n                            {{\n                              asc: \" ⬆️\",\n                              desc: \" ⬇️\",\n                            }[header.column.getIsSorted() as string] ?? null}\n                          </button>\n                        ) : null}\n                      </TableHead>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {rangeTable.getRowModel().rows?.length ? (\n                rangeTable.getRowModel().rows.map((outlet) => (\n                  <tr\n                    key={`range-${outlet.id}-${outlet.percentage_error}`}\n                    className=\"hover:bg-sky-900/20 transition-colors duration-150\"\n                  >\n                    {outlet.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                    ))}\n                  </tr>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={rangeColumns.length} className=\"h-24 text-center\">\n                    {isRangeTableLoading ? <Progress value={50} className=\"max-w-sm\" /> : \"No range data available.\"}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TableCell colSpan={rangeColumns.length}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 text-sm text-muted-foreground\">\n                      {rangeTable.getFilteredRowModel().rows.length} of {rangeTable.getCoreRowModel().rows.length} range\n                      data\n                    </div>\n                    <div className=\"flex items-center space-x-2 lg:space-x-4\">\n                      <div className=\"space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => rangeTable.previousPage()}\n                          disabled={!rangeTable.getCanPreviousPage()}\n                        >\n                          <FaArrowLeft className=\"mr-2 h-4 w-4\" />\n                          Previous\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => rangeTable.nextPage()}\n                          disabled={!rangeTable.getCanNextPage()}\n                        >\n                          Next\n                          <FaArrowRight className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}